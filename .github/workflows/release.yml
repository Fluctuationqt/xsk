name: Release

on:
  push:
    tags:
    - 'v*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
    - name: Download sapmachine JDK 11
      run: |
        download_url="https://github.com/SAP/SapMachine/releases/download/sapmachine-11.0.11%2B8/sapmachine-jdk-11.0.11-ea.8_linux-x64_bin.tar.gz"
        wget -O "${RUNNER_TEMP}/sapmachine-jdk-11.0.11.tar.gz" "${download_url}"
    - name: Setup sapmachine JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'jdkfile'
        jdkFile: ${{ runner.temp }}/sapmachine-jdk-11.0.11.tar.gz
        java-version: '11.0.11'
        architecture: x64
    - name: Set XSK Version
      run: echo XSK_VERSION=${GITHUB_REF#refs/*/} | tr v " " | sed 's/ //'  >> $GITHUB_ENV
    - name: Maven Build
      run: mvn clean install
    - name: Dodcker Login
      run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}
    - name: Push XSK
      run: |
        cd releng/server
        cp -r "${JAVA_HOME}" jdk
        docker build -t dirigiblelabs/xsk:$XSK_VERSION --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
        docker push dirigiblelabs/xsk:$XSK_VERSION
        cd ../../
    - name: Push XSK for SAP Cloud Foundry
      run: |
        cd releng/sap-cf
        cp -r "${JAVA_HOME}" jdk
        docker build -t dirigiblelabs/xsk-cf:$XSK_VERSION --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
        docker push dirigiblelabs/xsk-cf:$XSK_VERSION
        cd ../../
    - name: Push XSK for SAP Kyma
      run: |
        cd releng/sap-kyma
        cp -r "${JAVA_HOME}" jdk
        docker build -t dirigiblelabs/xsk-kyma:$XSK_VERSION --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
        docker push dirigiblelabs/xsk-kyma:$XSK_VERSION
        cd ../../
    - uses: buildpacks/github-actions/setup-pack@v4.1.0
    - name: XSK Buildpack
      run: |
        cd releng/buildpacks/xsk/
        docker build --build-arg XSK_VERSION=$XSK_VERSION -t dirigiblelabs/kneo-xsk-stack-base . --target base
        docker tag dirigiblelabs/kneo-xsk-stack-base dirigiblelabs/kneo-xsk-stack-base:$XSK_VERSION
        docker push dirigiblelabs/kneo-xsk-stack-base:$XSK_VERSION
        docker build --build-arg XSK_VERSION=$XSK_VERSION -t dirigiblelabs/kneo-xsk-stack-run . --target run
        docker tag dirigiblelabs/kneo-xsk-stack-run dirigiblelabs/kneo-xsk-stack-run:$XSK_VERSION
        docker push dirigiblelabs/kneo-xsk-stack-run:$XSK_VERSION
        docker build --build-arg XSK_VERSION=$XSK_VERSION -t dirigiblelabs/kneo-xsk-stack-build . --target build
        docker tag dirigiblelabs/kneo-xsk-stack-build dirigiblelabs/kneo-xsk-stack-build:$XSK_VERSION
        docker push dirigiblelabs/kneo-xsk-stack-build:$XSK_VERSION
        cd buildpack/
        pack buildpack package dirigiblelabs/kneo-xsk-buildpack --config ./package.toml
        docker tag dirigiblelabs/kneo-xsk-buildpack dirigiblelabs/kneo-xsk-buildpack:$XSK_VERSION
        docker push dirigiblelabs/kneo-xsk-buildpack:$XSK_VERSION
        cd ../../../../
    - name: Java Buildpack
      run: |
        cd releng/buildpacks/java/
        docker build -t dirigiblelabs/kneo-java-stack-base . --target base
        docker tag dirigiblelabs/kneo-java-stack-base dirigiblelabs/kneo-java-stack-base:$XSK_VERSION
        docker push dirigiblelabs/kneo-java-stack-base:$XSK_VERSION
        docker build -t dirigiblelabs/kneo-java-stack-run . --target run
        docker tag dirigiblelabs/kneo-java-stack-run dirigiblelabs/kneo-java-stack-run:$XSK_VERSION
        docker push dirigiblelabs/kneo-java-stack-run:$XSK_VERSION
        docker build -t dirigiblelabs/kneo-java-stack-build . --target build
        docker tag dirigiblelabs/kneo-java-stack-build dirigiblelabs/kneo-java-stack-build:$XSK_VERSION
        docker push dirigiblelabs/kneo-java-stack-build:$XSK_VERSION
        cd buildpack/
        pack buildpack package dirigiblelabs/kneo-java-buildpack --config ./package.toml
        docker push dirigiblelabs/kneo-java-buildpack
        cd ../../../../

#----------------Publish GitHub Release------------------#

    - name: Package WAR files
      run: |
        zip --junk-paths server releng/server/target/ROOT.war

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        tag_name: v${{ env.XSK_VERSION }}
        release_name: ${{ env.XSK_VERSION }}
        draft: false
        prerelease: false
        body: |
          ## XSK - ${{ env.XSK_VERSION }}
         
          #### Docker images:
            - [dirigiblelabs/xsk](https://hub.docker.com/r/dirigiblelabs/xsk/tags?page=1&ordering=last_updated) - XSK Server.
            - [dirigiblelabs/xsk-cf](https://hub.docker.com/r/dirigiblelabs/xsk-cf/tags?page=1&ordering=last_updated) - XSK Cloud Foundry.
            - [dirigiblelabs/xsk-kyma](https://hub.docker.com/r/dirigiblelabs/xsk-kyma/tags?page=1&ordering=last_updated) - XSK Kyma.

          #### Available for download `*.war` packages:
            - [server](https://github.com/sap/xsk/releases/download/v${{ env.XSK_VERSION }}/server.zip) - XSK Server.
            
          > _**Note:** Unzip the downloaded file to extract the `ROOT.war` binary._
          
          For more information go to [https://www.dirigible.io/help/setup/](https://www.dirigible.io/help/setup/).
          
          ## XSK - ${{ env.XSK_VERSION }} - Buildpack

          #### Prerequisites

          - Install [Kpack](https://github.com/pivotal/kpack) on your Kubernetes/Kyma cluster
          - Create `ClusterStore`, `ClusterStack` and `Builder`:

          ```yaml
          apiVersion: kpack.io/v1alpha1
          kind: ClusterStore
          metadata:
            name: kneo-xsk-store
          spec:
            sources:
            - image: dirigiblelabs/kneo-xsk-buildpack:${{ env.XSK_VERSION }}
          ---
          apiVersion: kpack.io/v1alpha1
          kind: ClusterStack
          metadata:
            name: kneo-xsk-stack
          spec:
            id: com.sap.kneo.xsk
            buildImage:
              image: dirigiblelabs/kneo-xsk-stack-build:${{ env.XSK_VERSION }}
            runImage:
              image: dirigiblelabs/kneo-xsk-stack-run:${{ env.XSK_VERSION }}
          ---
          apiVersion: kpack.io/v1alpha1
          kind: Builder
          metadata:
            name: kneo-xsk
          spec:
            serviceAccount: <your-service-account>
            tag: <your-docker-organization>/<your-docker-builder-repository>
            stack:
              name: kneo-xsk-stack
              kind: ClusterStack
            store:
              name: kneo-xsk-store
              kind: ClusterStore
            order:
            - group:
              - id: dirigiblelabs/kneo-xsk-buildpack
          ```

          > _**Note**: Replace `<your-service-account>` with your ServiceAccount (sample could be found [here](https://github.com/SAP/xsk/blob/main/releng/buildpacks/xsk/kpack/service-account.yaml))._

          > _**Note**: Also replace `<your-docker-organization>/<your-docker-builder-repository>` with your Docker Repository, where the Docker Image Builder will be hosted (e.g. `my-organization/my-builder`)_

          #### Usage

          ```yaml
          apiVersion: kpack.io/v1alpha1
          kind: Image
          metadata:
            name: xsk-application
            namespace: default
          spec:
            tag: <your-docker-organization>/<your-application-docker-image-repository>
            serviceAccount: <your-service-account>
            builder:
              name: kneo-xsk
              kind: Builder
            source:
              blob:
                url: https://github.com/SAP/xsk/raw/main/samples/products.zip
          ```

          > _**Note**: Replace `<your-service-account>` with your ServiceAccount (sample could be found [here](https://github.com/SAP/xsk/blob/main/releng/buildpacks/xsk/kpack/service-account.yaml))._

          > _**Note**: Also replace `<your-docker-organization>/<your-application-docker-image-repository>` with your Docker Repository, where the Docker Image Builder will be hosted (e.g. `my-organization/my-application`)_

    - name: Upload Server
      id: upload-server 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./server.zip
        asset_name: server.zip
        asset_content_type: application/zip

#----------------Publish GitHub Release------------------#

#----------------Publish Helm Release------------------#

    - name: Helm tool installer
      uses: Azure/setup-helm@v1
    - name: Helm Charts Release - Checkout gh-pages
      run: |
        mkdir charts-temp
        cp -r releng/helm-charts/ charts-temp/
        #### Git Checkout Workaround
        git add .github/
        git add .reuse/
        git add LICENSES/
        git add modules/
        git add releng/
        git add samples/
        git reset --hard
        ####
        git fetch
        git checkout gh-pages

        cp charts/* .
    - name: Helm Charts Release - Set Chart Version - XSK
      run: |
        cd charts-temp/helm-charts/xsk/
        find *.yaml -type f -exec sed -i ''s/#{XSKVersion}#/${{ env.XSK_VERSION }}/g'' {} \;
    - name: Helm Charts Release
      run: |
        cp charts/* charts-temp/helm-charts/
        cd charts-temp/helm-charts/
        helm package xsk
        cd ..
        helm repo index helm-charts/ --url https://sap.github.io/xsk/charts

        cp helm-charts/index.yaml ../.
        cp helm-charts/xsk-$XSK_VERSION.tgz ../charts/
        cd ..
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git add index.yaml
        git add charts/
        git commit -m "Updates Helm Charts - Release $XSK_VERSION"
        git push origin gh-pages
        git add .
        git reset --hard
        git checkout main
#----------------Publish Helm Release------------------#

#-----------------Create GitHub Branch-------------------#

    - name: Create GitHub Branch
      run: |
        git checkout -b $XSK_VERSION
        git push origin $XSK_VERSION

#-----------------Create GitHub Branch-------------------#

#------------------Update XSK Instance-------------------#

#    - name: Kubectl tool installer
#      uses: Azure/setup-kubectl@v1
#    - name: Setup Kube Config File
#      run: |
#        mkdir $HOME/.kube
#        echo "${{ secrets.KUBE_CONFIG }}" >> $HOME/.kube/config
#    - name: Update XSK Instance
#      run: kubectl set image deployment/xsk xsk=dirigiblelabs/xsk-kyma:$XSK_VERSION

#------------------Update XSK Instance-------------------#
